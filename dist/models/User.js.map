{"version":3,"sources":["../../server/models/User.js"],"names":["mongoose","bcrypt","jwt","keys","uniqueValidator","schema","Schema","email","type","String","required","lowercase","index","unique","passwordHash","firstname","lastname","gender","country","confirmed","Boolean","default","confirmationToken","timestamps","methods","isValidPassword","password","compareSync","setPassword","hashSync","setConfirmationToken","generateJWT","sign","JWT_SECRET","toAuthJSON","token","plugin","message","model"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;;AAEA;AACA,MAAMC,SAAS,IAAIL,SAASM,MAAb,CACb;AACEC,SAAO;AACLC,UAAMC,MADD;AAELC,cAAU,IAFL;AAGLC,eAAW,IAHN;AAILC,WAAO,IAJF;AAKLC,YAAQ;AALH,GADT;AAQEC,gBAAc,EAAEN,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EARhB;AASEK,aAAU,EAAEP,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EATZ;AAUEM,YAAS,EAAER,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAVX;AAWEO,UAAO,EAAET,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAXT;AAYEQ,WAAQ,EAAEV,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAZV;AAaES,aAAW,EAAEX,MAAMY,OAAR,EAAiBC,SAAS,KAA1B,EAbb;AAcEC,qBAAmB,EAAEd,MAAMC,MAAR,EAAgBY,SAAS,EAAzB;AAdrB,CADa,EAiBb,EAAEE,YAAY,IAAd,EAjBa,CAAf;;AAoBAlB,OAAOmB,OAAP,CAAeC,eAAf,GAAiC,SAASA,eAAT,CAAyBC,QAAzB,EAAmC;AAClE,SAAOzB,OAAO0B,WAAP,CAAmBD,QAAnB,EAA6B,KAAKZ,YAAlC,CAAP;AACD,CAFD;;AAIAT,OAAOmB,OAAP,CAAeI,WAAf,GAA6B,SAASA,WAAT,CAAqBF,QAArB,EAA+B;AAC1D,OAAKZ,YAAL,GAAoBb,OAAO4B,QAAP,CAAgBH,QAAhB,EAA0B,EAA1B,CAApB;AACD,CAFD;;AAIArB,OAAOmB,OAAP,CAAeM,oBAAf,GAAsC,SAASA,oBAAT,GAAgC;AACpE,OAAKR,iBAAL,GAAyB,KAAKS,WAAL,EAAzB;AACD,CAFD;;AAIA1B,OAAOmB,OAAP,CAAeO,WAAf,GAA6B,SAASA,WAAT,GAAuB;AAClD,SAAO7B,IAAI8B,IAAJ,CACL;AACEzB,WAAO,KAAKA,KADd;AAEEY,eAAW,KAAKA;AAFlB,GADK,EAKLhB,KAAK8B,UALA,CAAP;AAOD,CARD;;AAWA5B,OAAOmB,OAAP,CAAeU,UAAf,GAA4B,SAASA,UAAT,GAAsB;AAChD,SAAO;AACL3B,WAAO,KAAKA,KADP;AAELY,eAAW,KAAKA,SAFX;AAGLJ,eAAW,KAAKA,SAHX;AAILoB,WAAO,KAAKJ,WAAL;AAJF,GAAP;AAMD,CAPD;;AASA1B,OAAO+B,MAAP,CAAchC,eAAd,EAA+B,EAAEiC,SAAS,6BAAX,EAA/B;;AAEA,eAAerC,SAASsC,KAAT,CAAe,MAAf,EAAuBjC,MAAvB,CAAf","file":"User.js","sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport keys from \"../config/keys\";\nimport uniqueValidator from \"mongoose-unique-validator\";\n\n// TODO: add uniqueness and email validations to email field\nconst schema = new mongoose.Schema(\n  {\n    email: {\n      type: String,\n      required: true,\n      lowercase: true,\n      index: true,\n      unique: true\n    },\n    passwordHash: { type: String, required: true },\n    firstname:{ type: String, required: true },\n    lastname:{ type: String, required: true },\n    gender:{ type: String, required: true },\n    country:{ type: String, required: true },\n    confirmed: { type: Boolean, default: false },\n    confirmationToken: { type: String, default: \"\" }\n  },\n  { timestamps: true }\n);\n\nschema.methods.isValidPassword = function isValidPassword(password) {\n  return bcrypt.compareSync(password, this.passwordHash);\n};\n\nschema.methods.setPassword = function setPassword(password) {\n  this.passwordHash = bcrypt.hashSync(password, 10);\n};\n\nschema.methods.setConfirmationToken = function setConfirmationToken() {\n  this.confirmationToken = this.generateJWT();\n};\n\nschema.methods.generateJWT = function generateJWT() {\n  return jwt.sign(\n    {\n      email: this.email,\n      confirmed: this.confirmed\n    },\n    keys.JWT_SECRET\n  );\n};\n\n\nschema.methods.toAuthJSON = function toAuthJSON() {\n  return {\n    email: this.email,\n    confirmed: this.confirmed,\n    firstname: this.firstname,\n    token: this.generateJWT()\n  };\n};\n\nschema.plugin(uniqueValidator, { message: \"This email is already taken\" });\n\nexport default mongoose.model(\"User\", schema);"]}